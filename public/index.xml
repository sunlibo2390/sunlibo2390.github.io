<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bob Serling&#39;s Blog</title>
    <link>https://sunlibo2390.github.io/</link>
    <description>Recent content on Bob Serling&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Bob Serling and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 08 Apr 2021 22:13:40 +0800</lastBuildDate><atom:link href="https://sunlibo2390.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于线性回归的一点思考</title>
      <link>https://sunlibo2390.github.io/post/2021-04-08-%E5%AF%B9%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</link>
      <pubDate>Thu, 08 Apr 2021 22:13:40 +0800</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/2021-04-08-%E5%AF%B9%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</guid>
      <description>&amp;emsp;&amp;emsp;陈希孺先生在《数理统计学简史》的序言中提到，数理统计学是“收集和分析数据的科学与艺术”，并且着重强调了数理统计的艺术性，指出“统计方法要灵活使用”。而灵活使用统计方法的前提，是要深入理解和掌握方法，事实上，即便是最基本的模型也大有门道，在这里把自己的一些思考写下来。
 1. 线性回归的提出 &amp;emsp;&amp;emsp;“回归”一词是弗朗西斯·高尔登对父母身高和子女身高关系的研究中提出的。彼时基因已经被发现，并且人们已经认识到基因对个体性状的显著影响。基于这样的认识，高尔登一开始认为子女身高的分布应与其父母身高的分布不同。但调查结果却并非如此，反而显示子女身高与父母身高近似遵循同一正态分布。但是根据拉普拉斯中心极限定理，正态分布是“大量微小因素共同作用”的结果，而遗传对子女身高而言并非“微小因素”，这就产生了矛盾。
&amp;emsp;&amp;emsp;在研究这一问题的过程中，高尔登发现正态分布可以是若干个较小的正态分布的叠加，并且子女的身高有向总体身高平均值移动的趋势，即回归现象，因此解决了子女与父母身高分布同一的问题。
&amp;emsp;&amp;emsp;在上述回归现象中研究的对象是完全同质的，即均为身高。在数理统计学之后的发展中，研究的对象扩展到非同质的相关变量，如身高与体重、肘长与身高等，也由此发明了相关系数的概念。
&amp;emsp;&amp;emsp;借助回归和相关，线性回归得以初步建立，并发展成为多元线性回归，至今仍是诸多领域中十分有效的分析工具。但是许多使用者对于线性回归的认识与理解不够，要么得出经不起推敲的结论，要么进行的直接是无意义的回归。下面给出一个线性回归的实例，以指出一些值得注意的点。
2. 一个实例 &amp;emsp;&amp;emsp;现有某一班级全体学生期末各科成绩的数据，部分数据如下：

&amp;emsp;&amp;emsp;将总成绩作为预测变量，将语文成绩作为响应变量，进行一元线性回归，得到如下结果：

&amp;emsp;&amp;emsp;得到回归方程：
 \( sum = 62.657428+5.818403*chi \tag{1.1} \label{eq:1.1} \) 
&amp;emsp;&amp;emsp;对于该回归模型，可以这样理解：
\(总成绩=语文成绩可以解释的部分+语文成绩无法解释的部分\)
&amp;emsp;&amp;emsp;由于总成绩中包含语文成绩，故上式的“语文成绩可以解释的部分”包括语文成绩本身。此外，由于语文成绩与其他科目成绩有相关关系（直觉上是自然的，因为语文成绩好的学生其他科目成绩也会比较高），因此其他科目的成绩在一定程度上可以用语文成绩来预测。如果可行，则“语文成绩可以解释的部分”还将包括“其他科目成绩中与语文成绩相关的部分”。事实上，将语文成绩作为因变量，依次将其他科目成绩作为自变量进行一元线性回归，得到如下结果：
\[ \left \{ \begin{aligned} 0.000000+1.000000*chi&amp;=chi \\ 7.891668+0.639746*chi&amp;=math \\ -20.858168+0.849845*chi&amp;=fore\\ 18.876242+0.676321*chi&amp;=phy\\ -0.393098+0.654138*chi&amp;=che\\ -17.761301+0.996678*chi&amp;=geo\\ 29.830859+0.586608*chi&amp;=his \end{aligned} \right. \]
&amp;emsp;&amp;emsp;将上述各式相加后等号左侧为：\(62.657428+5.818403*chi\)。对比\eqref{eq:1.1}，发现两式系数完全相同。此外，对上述每个回归方程均可以做如下理解：
\(某科成绩=与语文成绩有关的部分+与语文成绩无关的部分\)
&amp;emsp;&amp;emsp;其中，“语文成绩可以解释的部分”指语文成绩与该科成绩的相关关系，“语文成绩无法解释的部分”则指其他未考虑因素的期望值影响的部分与随机误差。下面对后一句进行进一步的解释。
3. 进一步解释 &amp;emsp;&amp;emsp;为了说明后一句，我们进行如下的模拟实验：设随机变量\(X\sim N(0,1),Y\sim N(2,4)\)，\(X\)与\(Y\)相互独立。设随机变量\(Z=1+0.5*X+0.5*Y\),易知\(Z\sim N(2,\frac{5}{4})\)，并且有
\(Cov(Z,X)=Cov(Z,Y)=\frac{1}{2}\)
\(\rho_{xz}=\frac{\sqrt5}{5}\)&amp;emsp;&amp;emsp;\(\rho_{yz}=\frac{\sqrt5}{10}\)
&amp;emsp;&amp;emsp;现假设，\(Z\)变量为实际要预测的变量，变量\(X\)为实际能测得的自变量，变量\(Y\)由于某种原因（如技术手段不足）在实际中无法测得。进行一次随机抽样得到容量为\(100\)的样本，这些样本对应\(Y\)值均值为\(1.921858\)。  &amp;emsp;&amp;emsp;要预测变量\(Z\)的变化情况，但实际中变量\(Y\)的值无法测得，故仅根据变量\(X\)对进行一元线性回归，结果如下：  &amp;emsp;&amp;emsp;实际回归方程：  \begin{equation} Z=1.961828+0.466815*X \tag{3.1} \label{eq:3.1} \end{equation} 
&amp;emsp;&amp;emsp;发现回归方程中常数项与\(Z\)的实际方程中常数项差距较大，而回归系数与实际方程中\(X\)的系数相近。同时发现，将样本对应\(Y\)值均值代入实际方程中后，得到：
 \begin{equation} Z=1.</description>
    </item>
    
    <item>
      <title>相关信息</title>
      <link>https://sunlibo2390.github.io/about/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sunlibo2390.github.io/about/</guid>
      <description>Bob Serling 中国人民大学数据科学与大数据专业在读 Github:&amp;emsp; https://github.com/sunlibo2390
个人邮箱：17729033632@163.com

关于博客 这个博客是基于blogdown、Hugo、Github搭建的静态网站，搭建过程中主要参考了以下书籍与文章：
 https://bookdown.org/yihui/blogdown/ https://amber.rbind.io/2016/12/19/website/  有关Hugo的信息如下：
Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>https://sunlibo2390.github.io/post/2016-12-30-hello-markdown/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/2016-12-30-hello-markdown/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>https://sunlibo2390.github.io/post/2015-01-01-lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/2015-01-01-lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://sunlibo2390.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://sunlibo2390.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://sunlibo2390.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://sunlibo2390.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunlibo2390.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
